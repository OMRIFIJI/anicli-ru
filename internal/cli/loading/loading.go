package loading

import (
	"fmt"
	"time"

	"github.com/OMRIFIJI/anicli-ru/internal/cli/ansi"
)

func RestoreTerminal() {
	defer ansi.ShowCursor()
	defer ansi.ClearLine()
}

func DisplayLoading(quitChan chan struct{}) {
	flowerPhases := []string{"", "*", "‚ùÄ", "üå∏"}
	phasesCount := len(flowerPhases)
	bloomLen := len(flowerPhases[phasesCount-1])
	flowersMax := 3
	loadingStr := "–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É... "

	ansi.HideCursor()
	fmt.Print(loadingStr)

	for {
		printSuccess := func(j int) bool {
			select {
			case <-quitChan:
				return false
			case <-time.After(bloomPhaseSleep * time.Millisecond):
				ansi.ClearLine()
				fmt.Print(loadingStr + flowerPhases[j])
				return true
			}
		}

		// –†–æ—Å—Ç
		for range flowersMax {
			for j := 1; j < len(flowerPhases); j++ {
				if !printSuccess(j) {
					return
				}
			}
			loadingStr += flowerPhases[phasesCount-1]
		}

		// –£–≤—è–¥–∞–Ω–∏–µ —Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–º —Ü–∏–∫–ª–æ–º –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ —Å–Ω–∞
		loadingStr = loadingStr[:len(loadingStr)-bloomLen]
		for j := len(flowerPhases) - 2; j > 0; j-- {
			if !printSuccess(j) {
				return
			}
		}
		for range flowersMax - 1 {
			loadingStr = loadingStr[:len(loadingStr)-bloomLen]
			for j := len(flowerPhases) - 1; j > 0; j-- {
				if !printSuccess(j) {
					return
				}

			}
		}

		// –í—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ –∑–Ω–∞—á–∫–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
		select {
		case <-quitChan:
			return
		case <-time.After(bloomPhaseSleep * time.Millisecond):
			ansi.ClearLine()
			fmt.Print(loadingStr)
		}
	}
}
